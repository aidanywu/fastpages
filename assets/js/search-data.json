{
  
    
        "post0": {
            "title": "Week 2 Innovation -- Using Objects",
            "content": "Code.org . Evidence of finishing Unit 1: | Key Learnings from Code.org Unit 1 | . Using Objects Tech Talk . Java Menu | . Team . Team Repository | .",
            "url": "https://aidanywu.github.io/fastpages/markdown/2022/09/05/week2usingobjects.html",
            "relUrl": "/markdown/2022/09/05/week2usingobjects.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Java Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object boolean quit = false; while (!quit) { try { // scan for Input this.print(); // print Menu int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Unit Converter&quot;); System.out.println(&quot;2 - Inverse Calculator&quot;); System.out.println(&quot;3 - Right Triangle Hypotenuse Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;bye&quot;); quit = true; break; case 1: unitConverter(); break; case 2: inverse(); break; case 3: hypotenuseCalc(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } public void unitConverter() { int choice = 0; double num = 0.0; Scanner in = new Scanner(System.in); System.out.print(&quot;In what unit is your current number in? (1=meters;2=feet;3=miles) n&quot;); try { choice = in.nextInt(); System.out.println(choice); } catch (Exception e) { System.out.println(&quot;not an int&quot;); } in.close(); in = new Scanner(System.in); System.out.print(&quot;whats the number you want to convert n&quot;); try { num = in.nextDouble(); System.out.println(num); } catch (Exception e) { System.out.println(&quot;not a double&quot;); } in.close(); if (choice==1) { double feet = num*3.28084; double miles = num*0.000621371; System.out.println(num + &quot; in feet is &quot; + feet + &quot; ft n&quot; + num + &quot; in miles is &quot; + miles + &quot; mi&quot;); } else if (choice==2) { double meter = num*0.3048; double miles = num/5280; System.out.println(num + &quot; in meters is &quot; + meter + &quot; m n&quot; + num + &quot; in miles is &quot; + miles + &quot; mi&quot;); } else if (choice==3) { double meter = num*1609.34; double feet = num*5280; System.out.println(num + &quot; in meters is &quot; + meter + &quot; m n&quot; + num + &quot; in feet is &quot; + feet + &quot; ft&quot;); } } public void inverse() { double num = 0.0; Scanner in = new Scanner(System.in); in = new Scanner(System.in); System.out.print(&quot;what do you want to find the inverse of n&quot;); try { num = in.nextDouble(); System.out.println(num); } catch (Exception e) { System.out.println(&quot;not a double&quot;); } in.close(); System.out.println(&quot;the inverse of &quot; + num + &quot; is &quot; + 1/num); } public void hypotenuseCalc() { double num1 = 0.0; double num2 = 0.0; Scanner in = new Scanner(System.in); in = new Scanner(System.in); System.out.print(&quot;what is the length of one side n&quot;); try { num1 = in.nextDouble(); System.out.println(num1); } catch (Exception e) { System.out.println(&quot;not a double&quot;); } in.close();in = new Scanner(System.in); System.out.print(&quot;what is the length of the other side n&quot;); try { num2 = in.nextDouble(); System.out.println(num2); } catch (Exception e) { System.out.println(&quot;not a double&quot;); } in.close(); System.out.println(&quot;the length of the hypotenuse is &quot; + Math.sqrt(Math.pow(num1, 2) + Math.pow(num2, 2))); } } Menu.main(null); . - Choose from these choices - 1 - Unit Converter 2 - Inverse Calculator 3 - Right Triangle Hypotenuse Calculator 0 - Quit - 3: what is the length of one side 3.0 what is the length of the other side 4.0 the length of the hypotenuse is 5.0 - Choose from these choices - 1 - Unit Converter 2 - Inverse Calculator 3 - Right Triangle Hypotenuse Calculator 0 - Quit - 0: bye .",
            "url": "https://aidanywu.github.io/fastpages/jupyter/2022/09/05/javamenu.html",
            "relUrl": "/jupyter/2022/09/05/javamenu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 2 Innovation -- Using Objects",
            "content": "Key Learnings . Creating and using objects use “public class” to create a class Within the class, use “public” to define methods that can used outside and inside the class and “private” to define methods that can only be used within the class. | “void” is used to specify that the respective method does not return anything | “static” means that no matter how many times the method is initialized, it will only be created once, therefore all instances created shares a single field. It belongs to itself instead of an instance. | . | use “[Class Name] [Variable Name] = new [Class Name] ();” to create new object of the specified class | use period (.) after object variable to use its method | . | Extend “extends” makes the class defined before it a subclass of the superclass that is defined after “extends” (an already defined class you are extending) | The subclass inherits all of the superclass’s attributes | . | .",
            "url": "https://aidanywu.github.io/fastpages/markdown/2022/09/05/code.orgunit1keylearnings.html",
            "relUrl": "/markdown/2022/09/05/code.orgunit1keylearnings.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Week 1 Innovation -- Primitives",
            "content": "Code.org . Evidence of finishing Lessons 1-5: | . Productive Blogging . Demonstrating Java primitives knowledge | Using Bash to check for key tools installation | College Board Unit notes | .",
            "url": "https://aidanywu.github.io/fastpages/markdown/2022/08/28/week1primitives.html",
            "relUrl": "/markdown/2022/08/28/week1primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Key Tools Installation Check",
            "content": "Python . python --version . Python 3.9.12 . Jupyter . conda --version echo conda list | grep jupyter . conda 4.13.0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Kernels . jupyter kernelspec list . Available kernels: bash /home/bosniancapability/.local/share/jupyter/kernels/bash java /home/bosniancapability/.local/share/jupyter/kernels/java javascript /home/bosniancapability/.local/share/jupyter/kernels/javascript python3 /home/bosniancapability/.local/share/jupyter/kernels/python3 . Java . javac --version echo java --version . javac 11.0.16 openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) .",
            "url": "https://aidanywu.github.io/fastpages/jupyter/2022/08/28/keytoolsbash.html",
            "relUrl": "/jupyter/2022/08/28/keytoolsbash.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit Converter",
            "content": "import java.util.Scanner; public class UnitConverter { public static void main(String[] args) { int choice = 0; double num = 0.0; Scanner in = new Scanner(System.in); System.out.print(&quot;In what unit is your current number in? (1=meters;2=feet;3=miles) n&quot;); try { choice = in.nextInt(); System.out.println(choice); } catch (Exception e) { System.out.println(&quot;not an int&quot;); } in.close(); in = new Scanner(System.in); System.out.print(&quot;whats the number you want to convert n&quot;); try { num = in.nextDouble(); System.out.println(num); } catch (Exception e) { System.out.println(&quot;not a double&quot;); } in.close(); if (choice==1) { double feet = num*3.28084; double miles = num*0.000621371; System.out.println(num + &quot; in feet is &quot; + feet + &quot; ft n&quot; + num + &quot; in miles is &quot; + miles + &quot; mi&quot;); } else if (choice==2) { double meter = num*0.3048; double miles = num/5280; System.out.println(num + &quot; in meters is &quot; + meter + &quot; m n&quot; + num + &quot; in miles is &quot; + miles + &quot; mi&quot;); } else if (choice==3) { double meter = num*1609.34; double feet = num*5280; System.out.println(num + &quot; in meters is &quot; + meter + &quot; m n&quot; + num + &quot; in feet is &quot; + feet + &quot; ft&quot;); } } } UnitConverter.main(null); . In what unit is your current number in? (1=meters;2=feet;3=miles) 3 whats the number you want to convert 69.0 69.0 in meters is 111044.45999999999 m 69.0 in feet is 364320.0 ft .",
            "url": "https://aidanywu.github.io/fastpages/jupyter/2022/08/28/javaunitcon.html",
            "relUrl": "/jupyter/2022/08/28/javaunitcon.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "College Board Units 1-10 Learning",
            "content": "Unit 1 Primitive Types . AP Exam Weighting 2.5-5% . Unit 2 Using Objects . AP Exam Weighting 5-7.5% . Unit 3 Boolean Expressions and if Statements . AP Exam Weighting 15-17.5% . Unit 4 Iteration . AP Exam Weighting 17.5-22.5% . Unit 5 Writing Classes . AP Exam Weighting 5-7.5% . Unit 6 Array . AP Exam Weighting 10-15% . Unit 7 ArrayList . AP Exam Weighting 2.5-7.5% . Unit 8 2D Array . AP Exam Weighting 7.5-10% . Unit 9 Inheritance . AP Exam Weighting 5-10% . Unit 10 Recursion . AP Exam Weighting 5-7.5% .",
            "url": "https://aidanywu.github.io/fastpages/markdown/2022/08/28/cb1-10.html",
            "relUrl": "/markdown/2022/08/28/cb1-10.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Python Hello",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://aidanywu.github.io/fastpages/jupyter/2022/08/21/pythonhi.html",
            "relUrl": "/jupyter/2022/08/21/pythonhi.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "HTML and Markdown",
            "content": "markdown1 . markdown2 . markdown3 . markdown4 . markdown5 . markdown . h1 . h2 . h3 . h4 . h5 . p . link .",
            "url": "https://aidanywu.github.io/fastpages/markdown/2022/08/21/markdownhtmlpost.html",
            "relUrl": "/markdown/2022/08/21/markdownhtmlpost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Java Hello",
            "content": "System.out.println(&quot;Hello&quot;) . Hello .",
            "url": "https://aidanywu.github.io/fastpages/jupyter/2022/08/21/javahi.html",
            "relUrl": "/jupyter/2022/08/21/javahi.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://aidanywu.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://aidanywu.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://aidanywu.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aidanywu.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}